generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id    String @id @default(uuid())
  name  String @unique
  users User[]
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  role_id       String
  password      String?
  name          String?
  address       String?
  register_code String
  activated     Boolean  @default(false)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  role          Role?    @relation(fields: [role_id], references: [id])
  metric        Metric[]
  creatorMetric Metric[] @relation("CreatorMetric")
  trainingPlanCreator TrainingPlan[] @relation("TrainingCreator")
  userPlan      UserPlan[] @relation("UserPlan")
  beneficiaryContracts Contract[] @relation("BeneficiaryContracts")
  providerContracts    Contract[] @relation("ProviderContracts")
}

model MetricType {
  id         String   @id @default(uuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  metric     Metric[]
}

model Metric {
  id         String     @id @default(uuid())
  user_id    String
  creator_id String
  type_id    String
  value      String
  date       DateTime
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  user       User       @relation(fields: [user_id], references: [id])
  creator    User       @relation("CreatorMetric", fields: [creator_id], references: [id])
  type       MetricType @relation(fields: [type_id], references: [id])
}

model TrainingPlan {
  id         String   @id @default(uuid())
  name       String
  creator_id String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  creator    User   @relation("TrainingCreator",fields: [creator_id], references: [id])
  userPlan   UserPlan[] @relation("TrainingPlan")
}

model UserPlan {
  user_id    String
  plan_id    String
  start_date DateTime
  end_date   DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User   @relation("UserPlan",fields: [user_id], references: [id])
  plan       TrainingPlan @relation("TrainingPlan",fields: [plan_id], references: [id])

  @@id([user_id, plan_id])
}

model Category { 
  id         String   @id @default(uuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  machines   Machine[]
  exercises  Exercise[]
}

model Machine {
  id         String @id @default(uuid())
  name       String
  photo      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  categories Category[]
  exercise   Exercise[] @relation("ExerciseMachine")
}

model Exercise{ 
  id         String @id @default(uuid())
  name       String
  photo      String
  machine_id String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  categories Category[]
  machine    Machine  @relation("ExerciseMachine", fields: [machine_id], references: [id])
}
model ContractCategory {
  id         String   @id @default(uuid())
  name       String   @unique
  created_at DateTime @default(now()) 
  updated_at DateTime @updatedAt
  contracts  Contract[]
}

model Contract {
  id              String          @id @default(uuid())
  beneficiary_id  String
  provider_id     String
  start_date      DateTime
  end_date        DateTime?
  category_id     String
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  
  beneficiary     User            @relation("BeneficiaryContracts", fields: [beneficiary_id], references: [id])
  provider        User            @relation("ProviderContracts", fields: [provider_id], references: [id])
  category        ContractCategory @relation(fields: [category_id], references: [id])

  @@index([beneficiary_id], name: "idx_contract_beneficiary")
  @@index([provider_id], name: "idx_contract_provider")
}